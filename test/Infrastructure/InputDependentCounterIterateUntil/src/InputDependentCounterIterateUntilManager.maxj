/***
    This kernel supports the kernel implementing input dependent counters.
*/
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.build.EngineParameters;

public class InputDependentCounterIterateUntilManager extends CustomManager {

    private static final String s_kernelName = "InputDependentCounterIterateUntilKernel";
    private static final int bufferSize = 4;
    private static final int counterWidth = 32;

    public InputDependentCounterIterateUntilManager(EngineParameters engineParameters) {
        super(engineParameters);

        KernelBlock k = addKernel(
            new InputDependentCounterIterateUntilKernel(
                    makeKernelParameters(s_kernelName),
                    bufferSize,
                    counterWidth));

        DFELink positionIndex  = addStreamToCPU("positionIndex");
        DFELink currentBound   = addStreamToCPU("currentBound");
        DFELink innerCounter   = addStreamToCPU("innerCounter");
        DFELink outerCounter   = addStreamToCPU("outerCounter");
        DFELink input          = addStreamFromCPU("input");

        positionIndex  <== k.getOutput("positionIndex");
        currentBound <== k.getOutput("currentBound");
        innerCounter <== k.getOutput("innerCounter");
        outerCounter <== k.getOutput("outerCounter");

        k.getInput("input") <== input;
    }

    private static EngineInterface modeDefault() {
        EngineInterface engine_interface = new EngineInterface();
        CPUTypes   dataType = CPUTypes.INT32;
        int        size = dataType.sizeInBytes();

        InterfaceParam  inN    = engine_interface.addParam("inN",  CPUTypes.INT);
        InterfaceParam  outN   = engine_interface.addParam("outN", CPUTypes.INT);

        /***
            Note that we explicitly add few more (bufferSize) cycles to
            kernel ticks and input stream: the input will be buffered
            and near the end of the kernel run the buffer will still want
            some new data to fetch into. We potentially can avoid this,
            but in order to detect the end of the kernel run we'll need
            to pass inN to the kernel as a parameter. This design makes
            the kernel completely agnostic of the input stream length.
        */
        engine_interface.setTicks(s_kernelName, outN + bufferSize + 1);
        engine_interface.setStream("input",         dataType, (inN + bufferSize)* size);
        engine_interface.setStream("innerCounter",  dataType, outN * size);
        engine_interface.setStream("outerCounter",  dataType, outN * size);
        engine_interface.setStream("currentBound",  dataType, outN * size);
        engine_interface.setStream("positionIndex",  dataType, outN * size);

        return engine_interface;
    }

    public static void main(String[] args) {
        InputDependentCounterIterateUntilManager manager =
            new InputDependentCounterIterateUntilManager(new EngineParameters(args));
        manager.createSLiCinterface(modeDefault());
        manager.build();
    }
}
