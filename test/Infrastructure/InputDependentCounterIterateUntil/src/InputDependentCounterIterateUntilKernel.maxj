/***
 This kernel implements nested counters where inner loop counter counts up to
 a position (cycle) given in an input stream.

 Higher language equivalent: nested loop of the form
   int position = 0;
   for (int i = 0; i < n; i++)
     for (int j = 0; position < input[i]; j++, position++) {...}

 Example input stream and corresponding counter values:
 cycle:                   0,1,2,3,4,5,6,7,8,9, 10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32
 sparseIndex   (8 items): 0,1,8,            15,                  19,         21,   25,         32
 count times:               1,7,7,7,7,7,7,7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7
 innerCounter (32 items):   0,0,1,2,3,4,5,6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 0, 1, 0, 1, 2, 3, 0, 1, 2, 3, 4, 5, 6
 outerCounter (32 items):   0,1,1,1,1,1,1,1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6


 Implementation strategy: io.input has it's own latency, so we cannot
 put simple feedback loop to control the input. Here, we buffer the
 input with a FIFO shift register to hide input latency. Each value read
 from a buffer sets up a counter counting up to a difference between
 that and previous value (interpret this difference as a number of cycles to
 hold for the next data retrieval). The wrap point of a counter triggers
 reading next value from FIFO  buffer, as well as getting new value from
 an input (if any). First bufferSize cycles the kernel stalls but
 prefetches io.input values to fill the FIFO.

*/
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.*;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.*;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.*;

class InputDependentCounterIterateUntilKernel extends Kernel
{

    protected InputDependentCounterIterateUntilKernel(KernelParameters parameters, int bufferSize, int counterWidth)
    {
        super(parameters);

        DFEType dataType  = dfeUInt(counterWidth);

        DFEVar prefetchEnable     = control.count.pulse(bufferSize);
        DFEVar outputEnable       = control.count.pulse(bufferSize+1, false);
        DFEVar nextEnableLoopBack = dfeBool().newInstance(this);

        // value of nextEnableLoopBack is undefined at 1st cycle
        DFEVar thisEnable =  stream.offset(nextEnableLoopBack, -1);

        DFEVar positionIndex = dataType.newInstance(this);
        positionIndex <== io.input("input", dataType, thisEnable);

        // Upper bound to an inner loop counter: what to count up to
        optimization.pushPipeliningFactor(0.0);
            DFEVar upperBound = control.count.pulse(1)? 1 : (positionIndex - stream.offset(positionIndex,-1));
        optimization.popPipeliningFactor();

        // Store input value in a FIFO buffer to hide latency of io.input.
        DFEVar storedUpperBound = fifoBufferPushPop(thisEnable, upperBound, bufferSize, dataType);

        // start counting up until currently retrieved value
        // (and hold for the first few pre-fetch cycles)
        Params repeatParam = control.count.makeParams(counterWidth)
                        .withWrapMode(WrapMode.COUNT_LT_MAX_THEN_WRAP)
                        .withEnable( ~prefetchEnable )
                        .withMax( storedUpperBound );
        Counter innerCounter = control.count.makeCounter(repeatParam);

        Params param = control.count.makeParams(counterWidth)
                            .withEnable( innerCounter.getWrap() & outputEnable );
        Counter outerCounter = control.count.makeCounter(param);


        optimization.pushPipeliningFactor(0.0);
            nextEnableLoopBack <== control.count.pulse(bufferSize) | innerCounter.getWrap();
        optimization.popPipeliningFactor();

        /**************************************************
        */

        // Since counters stall for initial few (FIFO buffer size) cycles, we need
        // to buffer positionIndex as well if we need it for later usage.
        DFEVar storedPositionIndex = fifoBufferPushPop(thisEnable, positionIndex, bufferSize, dataType);



        io.output("currentBound", storedUpperBound,  dataType, outputEnable);
        io.output("positionIndex",  storedPositionIndex, dataType, outputEnable);
        io.output("innerCounter", innerCounter.getCount(), dataType, outputEnable);
        io.output("outerCounter", outerCounter.getCount(), dataType, outputEnable);

    }

    /***
        This implements small FIFO buffer with 1 cycle latency (shift register).
        Input value is put to the end of a buffer and will come out (return value)
        only after bufferSize enabled cycles.
    */
    private DFEVar fifoBufferPushPop(DFEVar enable, DFEVar input, int bufferSize, DFEType dataType)
    {
        DFEVector<DFEVar> fifoBuffer = new DFEVectorType<DFEVar> (dataType, bufferSize).newInstance(this);
        DFEVar stored = dataType.newInstance(this);

        optimization.pushPipeliningFactor(0.0);
        {
            stored <== enable? stream.offset(fifoBuffer[bufferSize-1],-1) : stream.offset(stored,-1);
            for (int i = 1; i < bufferSize; i++)
            {
                fifoBuffer[i] <== enable? stream.offset(fifoBuffer[i-1],-1) : stream.offset(fifoBuffer[i],-1);
            }
            fifoBuffer[0] <== enable? input : stream.offset(fifoBuffer[0],-1);
        }
        optimization.popPipeliningFactor();

        return stored;
    }

}  // class
